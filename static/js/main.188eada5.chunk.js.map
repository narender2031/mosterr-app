{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/search-box/search-box.component.jsx","App.js","serviceWorker.js","index.js"],"names":["Card","props","className","src","monster","id","alt","name","email","CardList","monsters","filter","toLowerCase","includes","searchText","length","map","key","SearchBox","placeholder","handleChange","onChange","type","App","React","useState","setMonsters","setSearchText","useEffect","fetch","then","response","json","users","concat","value","target","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"0SAaeA,G,kBAVF,SAACC,GACb,OACC,uBAAKC,UAAU,kBACd,uBAAKC,IAAG,+BAA0BF,EAAMG,QAAQC,GAAxC,0BAAoEC,IAAI,iBAChF,0BAAKL,EAAMG,QAAQG,MACnB,0BAAKN,EAAMG,QAAQI,UCUPC,EAdE,SAACR,GACjB,IAAMS,EAAWT,EAAMS,SAASC,QAAO,SAACP,GAAD,OAAaA,EAAQG,KAAKK,cAAcC,SAASZ,EAAMa,eAE9F,OACC,uBAAKZ,UAAU,aACbQ,GAAYA,EAASK,OAAS,EAC9BL,EAASM,KAAI,SAACZ,GACb,OAAO,gBAAC,EAAD,CAAMa,IAAKb,EAAQC,GAAID,QAASA,OAErC,OCJQc,G,MANG,SAAC,GAAmC,IAAjCC,EAAgC,EAAhCA,YAAaC,EAAmB,EAAnBA,aACjC,OACC,yBAAOlB,UAAU,SAASK,KAAK,aAAaY,YAAaA,EAAaE,SAAUD,EAAcE,KAAK,aCwBtFC,MAxBf,WAAgB,IAAD,EACmBC,IAAMC,SAAS,IADlC,mBACNf,EADM,KACIgB,EADJ,OAEuBF,IAAMC,SAAS,IAFtC,mBAENX,EAFM,KAEMa,EAFN,KAeb,OAXAH,IAAMI,WAAU,WACZC,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAIP,EAAYO,QAC5B,CAACvB,EAASwB,SAQX,yBAAKhC,UAAU,OACb,gDACA,kBAAC,EAAD,CAAWkB,aARM,SAACe,GACpBR,EAAcQ,EAAMC,OAAOD,QAOchB,YAAa,eACpD,kBAAC,EAAD,CAAUT,SAAUA,EAAUI,WAAYA,MCZ5BuB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBnB,MAAK,SAAAoB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.188eada5.chunk.js","sourcesContent":["import * as React from 'react';\nimport './card.style.css';\n\nconst Card = (props) => {\n\treturn (\n\t\t<div className=\"card-container\">\n\t\t\t<img src={`https://robohash.org/${props.monster.id}?set=set2&size=180x180`} alt=\"monsterImage\" />\n\t\t\t<h2>{props.monster.name}</h2>\n\t\t\t<h3>{props.monster.email}</h3>\n\t\t</div>\n\t);\n};\n\nexport default Card;\n","import * as React from 'react';\nimport './card-list.style.css';\nimport Card from '../card/card.component';\n\nconst CardList = (props) => {\n\tconst monsters = props.monsters.filter((monster) => monster.name.toLowerCase().includes(props.searchText));\n\n\treturn (\n\t\t<div className=\"card-list\">\n\t\t\t{monsters && monsters.length > 0 ? (\n\t\t\t\tmonsters.map((monster) => {\n\t\t\t\t\treturn <Card key={monster.id} monster={monster} />;\n\t\t\t\t})\n\t\t\t) : null}\n\t\t</div>\n\t);\n};\n\nexport default CardList;\n","import * as React from 'react';\nimport './search-box.styles.css';\n\nconst SearchBox = ({ placeholder, handleChange }) => {\n\treturn (\n\t\t<input className=\"search\" name=\"search-box\" placeholder={placeholder} onChange={handleChange} type=\"search\" />\n\t);\n};\n\nexport default SearchBox;\n","import React from 'react';\nimport './App.css';\nimport CardList from './components/card-list/card-list.component';\nimport SearchBox from './components/search-box/search-box.component';\n\nfunction App() {\n  const [monsters, setMonsters] = React.useState([])\n  const [searchText, setSearchText] = React.useState('')\n\n  React.useEffect(() => {\n      fetch('https://jsonplaceholder.typicode.com/users')\n      .then(response => response.json())\n      .then(users => setMonsters(users))\n  }, [monsters.concat]);\n\n  const handleChange = (value) => {\n    setSearchText(value.target.value);\n  };\n\n  // \n  return (\n    <div className=\"App\">\n      <h1>Monsters Rolodex</h1>\n      <SearchBox handleChange={handleChange} placeholder={\"Search Box\"}/>\n      <CardList monsters={monsters} searchText={searchText}/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}